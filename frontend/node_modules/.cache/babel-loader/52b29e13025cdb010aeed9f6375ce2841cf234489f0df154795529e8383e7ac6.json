{"ast":null,"code":"import join from \"./join.js\";\n\n// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared\n// point sequences are identified. The topology can then be subsequently deduped\n// to remove exact duplicate arcs.\nexport default function (topology) {\n  var junctions = join(topology),\n    coordinates = topology.coordinates,\n    lines = topology.lines,\n    rings = topology.rings,\n    next,\n    i,\n    n;\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n      lineMid = line[0],\n      lineEnd = line[1];\n    while (++lineMid < lineEnd) {\n      if (junctions.has(coordinates[lineMid])) {\n        next = {\n          0: lineMid,\n          1: line[1]\n        };\n        line[1] = lineMid;\n        line = line.next = next;\n      }\n    }\n  }\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n      ringStart = ring[0],\n      ringMid = ringStart,\n      ringEnd = ring[1],\n      ringFixed = junctions.has(coordinates[ringStart]);\n    while (++ringMid < ringEnd) {\n      if (junctions.has(coordinates[ringMid])) {\n        if (ringFixed) {\n          next = {\n            0: ringMid,\n            1: ring[1]\n          };\n          ring[1] = ringMid;\n          ring = ring.next = next;\n        } else {\n          // For the first junction, we can rotate rather than cut.\n          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);\n          coordinates[ringEnd] = coordinates[ringStart];\n          ringFixed = true;\n          ringMid = ringStart; // restart; we may have skipped junctions\n        }\n      }\n    }\n  }\n  return topology;\n}\nfunction rotateArray(array, start, end, offset) {\n  reverse(array, start, end);\n  reverse(array, start, start + offset);\n  reverse(array, start + offset, end);\n}\nfunction reverse(array, start, end) {\n  for (var mid = start + (end-- - start >> 1), t; start < mid; ++start, --end) {\n    t = array[start], array[start] = array[end], array[end] = t;\n  }\n}","map":{"version":3,"names":["join","topology","junctions","coordinates","lines","rings","next","i","n","length","line","lineMid","lineEnd","has","ring","ringStart","ringMid","ringEnd","ringFixed","rotateArray","array","start","end","offset","reverse","mid","t"],"sources":["C:/my git/Design/frontend/node_modules/topojson-server/src/cut.js"],"sourcesContent":["import join from \"./join.js\";\r\n\r\n// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared\r\n// point sequences are identified. The topology can then be subsequently deduped\r\n// to remove exact duplicate arcs.\r\nexport default function(topology) {\r\n  var junctions = join(topology),\r\n      coordinates = topology.coordinates,\r\n      lines = topology.lines,\r\n      rings = topology.rings,\r\n      next,\r\n      i, n;\r\n\r\n  for (i = 0, n = lines.length; i < n; ++i) {\r\n    var line = lines[i],\r\n        lineMid = line[0],\r\n        lineEnd = line[1];\r\n    while (++lineMid < lineEnd) {\r\n      if (junctions.has(coordinates[lineMid])) {\r\n        next = {0: lineMid, 1: line[1]};\r\n        line[1] = lineMid;\r\n        line = line.next = next;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (i = 0, n = rings.length; i < n; ++i) {\r\n    var ring = rings[i],\r\n        ringStart = ring[0],\r\n        ringMid = ringStart,\r\n        ringEnd = ring[1],\r\n        ringFixed = junctions.has(coordinates[ringStart]);\r\n    while (++ringMid < ringEnd) {\r\n      if (junctions.has(coordinates[ringMid])) {\r\n        if (ringFixed) {\r\n          next = {0: ringMid, 1: ring[1]};\r\n          ring[1] = ringMid;\r\n          ring = ring.next = next;\r\n        } else { // For the first junction, we can rotate rather than cut.\r\n          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);\r\n          coordinates[ringEnd] = coordinates[ringStart];\r\n          ringFixed = true;\r\n          ringMid = ringStart; // restart; we may have skipped junctions\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return topology;\r\n}\r\n\r\nfunction rotateArray(array, start, end, offset) {\r\n  reverse(array, start, end);\r\n  reverse(array, start, start + offset);\r\n  reverse(array, start + offset, end);\r\n}\r\n\r\nfunction reverse(array, start, end) {\r\n  for (var mid = start + ((end-- - start) >> 1), t; start < mid; ++start, --end) {\r\n    t = array[start], array[start] = array[end], array[end] = t;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}